export declare const COMPONENT_CHANGE_HANDLE: unique symbol;
export type BaseShape = Record<string, unknown>;
export type ComponentHandle<Shape extends BaseShape = any, Ext extends Extensions<Shape> = any> = {
    id: number;
    name: string;
    defaults: () => Shape;
    reset: (instance: Shape) => void;
    initialize: (pooled: ComponentInstanceInternal, initial: Partial<Shape>, id: number) => void;
    serialize?: Serializer;
    deserialize?: Deserializer;
    extensions?: Ext;
    create: () => ComponentInstance<Shape, Ext>;
    isInstance: (instance: any) => instance is ComponentInstance<Shape, Ext>;
};
type Serializer<Shape = any> = (shape: Shape) => string;
type Deserializer<Shape = any> = (str: string, additionalProperties: PropertyDescriptorMap) => Shape;
type Extensions<Shape extends BaseShape> = Record<string, (shape: ComponentInstance<Shape>) => any> | undefined;
type AppliedExtensions<Ex extends Extensions<any>> = Ex extends undefined ? {} : {
    [K in keyof Ex]: Ex[K] extends (...args: any[]) => any ? ReturnType<Ex[K]> : never;
};
export type ComponentInstance$<Shape extends BaseShape = any> = {
    id: number;
    type: ComponentHandle<Shape>;
    [COMPONENT_CHANGE_HANDLE]?: (instance: ComponentInstance<Shape>) => void;
    changed: boolean;
};
export type ComponentInstance<Shape extends BaseShape = BaseShape, Ext extends Extensions<Shape> = Extensions<Shape>> = {
    $: ComponentInstance$<Shape>;
} & Shape & AppliedExtensions<Ext>;
export type ComponentInstanceInternal = {
    $: ComponentInstance$;
};
export type InstanceFor<Handle extends ComponentHandle> = Handle extends ComponentHandle<infer Shape, infer Ext> ? ComponentInstance<Shape, Ext> : never;
export type ComponentOptions<Shape extends BaseShape, Ext extends Extensions<Shape>> = {
    serialize?: Serializer<Shape>;
    deserialize?: Deserializer<Shape>;
    extensions?: Ext;
};
export declare const componentTypeMap: Map<number, ComponentHandle<any, any>>;
export declare function component<Shape extends BaseShape, Ext extends Extensions<Shape>>(name: string, init: () => Shape, options?: ComponentOptions<Shape, Ext>): ComponentHandle<Shape, Ext>;
export declare function state<Shape extends BaseShape, Ext extends Extensions<Shape>>(name: string, init: () => Shape, options?: Omit<ComponentOptions<Shape, Ext>, 'serialize' | 'deserialize'>): ComponentHandle<Shape, Ext>;
export declare function namespace(ns: string): {
    component: <Shape extends BaseShape, Ext extends Extensions<Shape>>(name: string, init: () => Shape, options?: ComponentOptions<Shape, Ext>) => ComponentHandle<Shape, Ext>;
    state: <Shape_1 extends BaseShape, Ext_1 extends Extensions<Shape_1>>(name: string, init: () => Shape_1, options?: Omit<ComponentOptions<Shape_1, Ext_1>, "serialize" | "deserialize"> | undefined) => ComponentHandle<Shape_1, Ext_1>;
};
export {};
